I"h(<h2 id="outlines"><strong>Outlines</strong></h2>
<ul>
  <li><a href="#reference"><strong>Reference</strong></a></li>
  <li><a href="#architecture-of-path-aggregation-network-panet"><strong>Architecture of Path Aggregation Network (PANet)</strong></a>
    <ul>
      <li><a href="#figure-1b-bottom-up-path-augmentation"><strong>Figure 1.(b) Bottom-Up Path Augmentation</strong></a></li>
      <li><a href="#figure-1c-adaptive-feature-pooling"><strong>Figure 1.(c) Adaptive Feature Pooling</strong></a></li>
      <li><a href="#figure-1e-fully-connected-fusion"><strong>Figure 1.(e) Fully-Connected Fusion</strong></a></li>
    </ul>
  </li>
  <li><a href="#performacne-comparision-of-panet"><strong>Performacne Comparision of PANet</strong></a></li>
</ul>

<p><br /></p>

<h2 id="reference"><strong>Reference</strong></h2>

<p><br /></p>

<ul>
  <li><a href="https://arxiv.org/pdf/1803.01534v4.pdf" target="_blank"><strong>Path Aggregation Network for Instance Segmentation, Shu Liu, 2018</strong></a></li>
</ul>

<p><br /></p>

<h2 id="architecture-of-path-aggregation-network-panet"><strong>Architecture of Path Aggregation Network (PANet)</strong></h2>

<p><br /></p>

<p>   <strong>Figure 1. Illustration of our framework.</strong></p>

<p><img width="900" alt="image" src="https://github.com/SuminizZ/Algorithm/assets/92680829/59ec2dbc-8b36-405f-bcba-a9960e7a5135" /></p>

<p><br /></p>

<ul>
  <li>
    <p>Path Aggregation Network (PANet) is an improvement from Feature Pyramidal Network (FPN) that is used in Mask R-CNN for instance segmentation.</p>
  </li>
  <li>
    <p>With a novel structures added to the backbone of FPN (Figure 1.(a)), PANet boosts the information flow in instance segmentation.</p>
  </li>
</ul>

<p><br /></p>

<h3 id="figure-1b-bottom-up-path-augmentation"><strong>Figure 1.(b) Bottom-Up Path Augmentation</strong></h3>

<p><br /></p>

<p>   <strong>Figure 2. Building block of Bottom-Up Augmentation Path</strong></p>

<p>   <img width="350" alt="image" src="https://github.com/SuminizZ/Algorithm/assets/92680829/674ed298-3244-41ae-aa9f-5e76aae8d603" /></p>

<p><br /></p>

<ul>
  <li>
    <p>While FPN introduced the concept of a top-down pathway that combines high-level semantic information with low-level spatial details, PANet further improves this by incorporating a bottom-up pathway that augments the information flow from low-level to higher levels.</p>
  </li>
  <li>
    <p>While lacking semantic capacity, low-level patterns possess relatively accurate instance localization with high responses to edges, which is crucial in instance segmentation.</p>
  </li>
  <li>
    <p>Hence, propagating low-level features to higher level maps significantly enhances the localization capability of the entire feature hierarchy.</p>
  </li>
  <li>
    <p>Despite the presence of a path connecting low-level structures to the topmost features in FPN, the length of this path are excessively long, extending to over 100 layers (<span style="color:red">red dahsed line</span> in <strong>Figure 1.</strong>).</p>
  </li>
  <li>
    <p>Bottom-up path introduced in PANet can effectively shorten this path to less than 10 layers (<span style="color:green">green dahsed line</span> in <strong>Figure 1.</strong>) with extra lateral connections projecting from a feature map at each level in top-down pathway.</p>
  </li>
  <li>
    <p>Creating a shortcut connecting low-level to higher levels of the pyramid, PANet can transmit much stronger and well-preserved localization information stored in lower-level features across the entire pyramid compared to FPN.</p>
  </li>
</ul>

<p><br /></p>

<h3 id="figure-1c-adaptive-feature-pooling"><strong>Figure 1.(c) Adaptive Feature Pooling</strong></h3>

<p><br /></p>

<p>   <strong>Figure 6. Illustration of Adaptive Feature Pooling</strong></p>

<p><img width="650" alt="image" src="https://github.com/SuminizZ/Algorithm/assets/92680829/8b137548-b16b-4d9e-8deb-c8800a23bf70" /></p>

<p><br /></p>

<ul>
  <li>
    <p>In FPN, proposals are assigned to a feature level according to the size of proposals. Small proposals are assigned to low-level features with high resolution and large proposals are to higher level features with lower resolution.</p>
  </li>
  <li>
    <p>This kind of strategy is based on an insight that smaller objects are more sensitive to spatial resolution to maintain fine grained details, whereas larger objects are largely robust to smaller details and rather depend on richer semantic context captured from large receptive field.</p>
  </li>
  <li>
    <p>Although simple and effective, this separation of level based on the proposal scale can lead to non-optimal results where proposals with non-significant pixel difference (like, 10 pixel) are assigned to different level and utilized to make separate predictions.</p>
  </li>
  <li>
    <p>Further, authors of the paper suggested that importance of features may not be strictly related to the size of objects.</p>
  </li>
  <li>
    <p>Based on these ides, they added an adaptive feature pooling layer to fuse all these feature maps pooled from different levels into a single integrated map.</p>
  </li>
  <li>
    <p>Allowing access for small proposals to richer context information captured in higher levels and large proposals to low level features that contain fine details and precise localization benefits the networks to extract features that are more beneficial for following prediction tasks.</p>
  </li>
</ul>

<p><br /></p>

<p>   <strong>Figure 3. Ratio of Features Pooled from Different feature levels</strong></p>

<p><img width="600" alt="image" src="https://github.com/SuminizZ/Algorithm/assets/92680829/01439ad8-a4c4-42b5-892f-7226a2b25f28" /></p>

<p><br /></p>

<ul>
  <li>
    <p>Each colored line represents the proposals of certain size (that are originally assigned to designated level in FPN) and horizontal axis denotes the source of pooled features.</p>
  </li>
  <li>
    <p>Shows how features extracted from different levels are distributed in proposals with different sizes.</p>
  </li>
  <li>
    <p>While there may be some variations in the ratio, feature from all levels coexist in each proposal, indicating that mulitple levels of features contribute to the proposal of a single scale.</p>
  </li>
</ul>

<p><br /></p>

<h3 id="figure-1e-fully-connected-fusion"><strong>Figure 1.(e) Fully-Connected Fusion</strong></h3>

<p><br /></p>

<ul>
  <li>
    <p>Mask R-CNN adopted a tiny Fully-Convolutional Network (FCN) to predict masks instead of fully-connected layers (fc layers) based on an idea that mask prediction is more of dense pixel-wise segmentation that preserves spatial representation of feature maps rather than flattening them into a vector.</p>
  </li>
  <li>
    <p>However, PANet combines two of these structures, utilizing both FCN and fc layers for instance segmentation, to exploit the distinct advantages that each network can provide.</p>
  </li>
  <li>
    <p>While FCN can give pixel-based prediction with shared parameters across the local receptive field, fc layers assign different weights per each location, allowing for segmentation based on more precise spatial information.</p>
  </li>
  <li>
    <p>By combining these two properties together, networks can achieve the ability to dynamically adapt to spatial locations along with global semantic context learned from the entire feature map.</p>
  </li>
</ul>

<p><br /></p>

<p>   <strong>Figure 4. Mask prediction branch with FF</strong></p>

<p><img src="https://github.com/SuminizZ/Algorithm/assets/92680829/a4e58399-314e-4763-bc95-cdf853f7e77a" width="700" /></p>

<p><br /></p>

<ul>
  <li>
    <p><strong>Main Path (tiny FCN)</strong></p>

    <ul>
      <li>
        <p>Consists of 4 convolutional layers (each one has 256 x 3 x 3 filters) followed by one deconvolutional layer with upsampling factor 2.</p>
      </li>
      <li>
        <p>predicts binary pixel-wise predictions for each class, decoupling classficiation task and instance segmentation task.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Shorter Path (fc layer)</strong></p>

    <ul>
      <li>
        <p>Intially branced from conv3 at main path, pass through 2 convolutional layers (both 3 x 3 filters), with the latter one compressing the channel to half to reduce computational cost.</p>
      </li>
      <li>
        <p>Output of final conv layer (conv5_fc) enters into a single fc layer that produces 784 x 1 x 1 output to subsequentailly be reshaped to 28 x 28, which is the same size as the mask predicted from FCN.</p>
      </li>
      <li>
        <p>Paper explaind that using only one fc layer is to prevent original spatial pattern from collapsing too much by repetitive hidden layers.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Two distinct outputs from each path are aggregated by addition to get final mask prediction.</p>
  </li>
</ul>

<p><br /></p>

<h2 id="performacne-comparision-of-panet"><strong>Performacne Comparision of PANet</strong></h2>

<p><br /></p>

<h3 id="component-ablation-studies"><strong>Component Ablation Studies</strong></h3>

<p><br /></p>

<p>   <strong>Table 3. Performance in terms of mask AP and box AP ($AP^{bb}$)</strong></p>

<p><img src="https://github.com/SuminizZ/Algorithm/assets/92680829/c37a0901-cd36-48c9-b463-3c415c7cc688" width="1100" /></p>

<p><br /></p>

<ul>
  <li>
    <p>Abberivations : MRB is the Mask R-CNN reported in its original pepers. re-implemented baseline (RBL), we gradually add multi-scale training (MST), multi-GPU synchronized batch normalization (MBN), bottom-up path augmentation (BPA), adaptive feature pooling (AFP), fullyconnected fusion (FF) and heavier head (HHD) for ablation studies.</p>
  </li>
  <li>
    <p>Every step shows slight improvement compared to no-implementation state and when all these new features are combined, the performance is improved by approximately about 4%p in average for every metrics compared to RBL.</p>
  </li>
</ul>

<p><br /></p>

<h3 id="comparision-with-other-models-on-fine-annotations-and-coco-datasets"><strong>Comparision with Other Models on Fine Annotations and COCO Datasets</strong></h3>

<p><br /></p>

<p><img src="https://github.com/SuminizZ/Algorithm/assets/92680829/e0bc7a9a-66fd-42d5-9024-013cc0ed7ecf" width="1000" /></p>
:ET