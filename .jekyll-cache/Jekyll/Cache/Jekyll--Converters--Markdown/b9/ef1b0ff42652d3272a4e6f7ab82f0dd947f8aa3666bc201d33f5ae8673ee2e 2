I"~"<p><br /></p>

<h2 id="백준-여행가자--골드-4">백준 여행가자 : 골드 4</h2>

<p><br /></p>

<p><img src="https://user-images.githubusercontent.com/92680829/144756636-924d12a0-7883-43cb-b978-7dfc278693bd.png" /></p>

<p><br /></p>

<h2 id="solution"><strong>Solution</strong></h2>

<p><br /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="n">sys</span><span class="p">.</span><span class="n">setrecursionlimit</span><span class="p">(</span><span class="mi">10000000</span><span class="p">)</span>
<span class="nb">input</span> <span class="o">=</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="n">readline</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="n">n</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">()),</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
<span class="n">graph</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>      <span class="c1"># row
</span>    <span class="n">tmp</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>       <span class="c1"># col
</span>        <span class="k">if</span> <span class="n">tmp</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">graph</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

<span class="n">flag</span> <span class="o">=</span> <span class="bp">False</span>
<span class="k">def</span> <span class="nf">dfs</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">visited</span><span class="p">):</span>       <span class="c1"># dfs
</span>    <span class="k">global</span> <span class="n">flag</span>
    <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="n">d</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">if</span> <span class="n">flag</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">s</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">v</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">visited</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">v</span> <span class="o">==</span> <span class="n">d</span><span class="p">:</span>
                <span class="n">flag</span> <span class="o">=</span> <span class="bp">True</span>
                <span class="k">return</span> <span class="bp">True</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">visited</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
                <span class="n">dfs</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">visited</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">flag</span>  

<span class="n">travel</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">()))</span>

<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">travel</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>            <span class="c1"># 여행할 도시가 1개뿐일 때
</span>    <span class="k">if</span> <span class="n">travel</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">n</span><span class="p">:</span>           <span class="c1"># 주어진 도시 범위 밖의 여행지이면 NO
</span>        <span class="k">print</span><span class="p">(</span><span class="s">"NO"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"YES"</span><span class="p">)</span>
    <span class="n">sys</span><span class="p">.</span><span class="nb">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">travel</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
    <span class="n">visited</span> <span class="o">=</span> <span class="p">[</span><span class="n">travel</span><span class="p">[</span><span class="n">k</span><span class="p">]]</span>
    <span class="n">flag</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">res</span> <span class="o">=</span> <span class="n">dfs</span><span class="p">(</span><span class="n">travel</span><span class="p">[</span><span class="n">k</span><span class="p">],</span> <span class="n">travel</span><span class="p">[</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">visited</span><span class="p">)</span>      <span class="c1"># 매 경로마다 가능한지 여부 확인
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">res</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"NO"</span><span class="p">)</span>
        <span class="k">break</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"YES"</span><span class="p">)</span>     
</code></pre></div></div>

<p><br /></p>

<h2 id="풀이과정-및-느낀점"><strong>풀이과정 및 느낀점</strong></h2>

<p><br /></p>

<p>이 문제를 처음 봤을 때 가장 처음 떠오른 방법은 dfs 또는 bfs 를 활용하는 방법이었다. <br />
여행경로 리스트(1-5-4-2-3)를 받아서 각각의 여행경로(1-5) 마다 실현가능한지 확인하는 dfs 함수를 짜고 한 번이라도 불가능한 경로가 나오면 NO 를 출력했다.
<br />
<br />
예외처리할 때 주의할 부분은</p>
<ol>
  <li>여행지 자체가 1개뿐일 때는 for 문을 타지 못하기 때문에 따로 처리를 해줘야 한다.<br /></li>
  <li>시작과 끝, 즉 (1-&gt;1) 이런 경로는 내 코드 상에서 visited 에 걸려 False 가 나오기 때문에 이 경우도 따로 함수 시작에 처리해줬다.
<br />
<br /></li>
</ol>

<p>우선 이렇게 풀어서 정답이 나오긴 했지만, 시간이 1400ms 정도나 걸렸는데 다른 사람들 풀이를 보니 100ms 미만이었다. 
<br />
참고해보니 Union-Find 알고리즘을 사용해서 시작과 도착경로가 동일한 집합 내에 속해있는지 여부를 따지면서 푼 듯했다.
<br />
다음에는 동일한 문제를 유니온 파인드 알고리즘을 활용해서 풀이한 문제를 올릴 예정이다.</p>
:ET