I"<p><br /></p>

<h2 id="프로그래머스-lvl-3--여행경로">프로그래머스 LvL 3 : 여행경로<br /></h2>
<p><br />
<img src="https://user-images.githubusercontent.com/92680829/137642761-24871932-5457-4863-99db-0b19003b61c8.png" /></p>

<p><br /></p>

<h2 id="solution"><strong>Solution</strong></h2>

<p><br /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
<span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">tickets</span><span class="p">):</span>
    <span class="n">graph</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>      
    <span class="k">for</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span> <span class="ow">in</span> <span class="n">tickets</span><span class="p">:</span>    
        <span class="n">graph</span><span class="p">[</span><span class="n">start</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">end</span><span class="p">)</span>            <span class="c1"># 단일 방향
</span>        <span class="n">graph</span><span class="p">[</span><span class="n">start</span><span class="p">].</span><span class="nf">sort</span><span class="p">(</span><span class="n">reverse</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span>    <span class="c1"># 알파벳 오름차순으로 정렬
</span>    
    <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="s">'ICN'</span><span class="p">]</span>     <span class="c1"># 항상 출발은 인천공항
</span>    <span class="n">route</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
    
    <span class="k">while</span> <span class="n">stack</span><span class="p">:</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> 
        <span class="k">if</span> <span class="n">cur</span> <span class="ow">in</span> <span class="n">graph</span> <span class="ow">and</span> <span class="n">graph</span><span class="p">[</span><span class="n">cur</span><span class="p">]:</span>      <span class="c1"># 해당 공항에서 출발하는 티켓이 남아있을 때
</span>            <span class="n">stack</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">cur</span><span class="p">].</span><span class="nf">pop</span><span class="p">())</span>   <span class="c1"># 사용한 ticket 은 pop, 공항 자체를 pop 시키는 게 아니라는 점이 포인트
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="n">route</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">())</span>       <span class="c1"># 최종 도착지(이 공항에서 출발하는 티켓이 없음)
</span>    
    <span class="n">route</span><span class="p">.</span><span class="nf">reverse</span><span class="p">()</span>     <span class="c1"># 도착한 순서대로 route 에 append 되기 때문에 reverse 를 시켜야 출발 -&gt; 도착 여행경로가 됨
</span>    
    <span class="k">return</span> <span class="n">route</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="풀이과정-및-느낀점"><strong>풀이과정 및 느낀점</strong></h2>

<p><br /></p>

<p>우선 이 문제는 연결된 공항을 우선적으로 다 지나야 하기 때문에 알고리즘 유형은 DFS 로 볼 수 있다. <br />
stack 으로 풀었는데, 오히려 stack 으로 푸니 도착지부터 route 에 append 시켜줘야 해서 더 헷갈렸다. 차라리 일반적인 dfs 풀이처럼 재귀로 풀었으면 정지조건에서 append 시키도록 처리하면 되니 덜 까다로웠을 거 같다. <br />
또 개인적으로 이 문제를 풀 때 신경써줘야 했던 건 방문한 공항이 아닌 그곳에서 사용한 티켓을 pop 시켜줘야 했던 부분이다. <br />
공항 자체는 티켓으로 연결되어있기만 하면 재방문이 가능하기 때문에 방문했다고 해서 visited 처리하는 것처럼 없애버리면 안 된다. <br />
도착지 -&gt; 출발지 역순으로 route 에 추가되기 때문에 출력할 때는 reverse 시켜주는 것도 포인트이다.</p>
:ET