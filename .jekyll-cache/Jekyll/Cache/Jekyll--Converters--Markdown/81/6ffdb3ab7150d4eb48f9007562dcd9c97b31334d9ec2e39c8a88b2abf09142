I"ğÌ<p><br /></p>

<h1 id="catnon-cat-classifier-with-logistic-regression"><strong>Cat/Non-Cat Classifier with Logistic Regression</strong></h1>

<p><br /></p>

<h2 id="load-dataset"><strong>Load Dataset</strong></h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">h5py</span>      <span class="c1"># required for interacting with files stored on h5 file
</span><span class="kn">import</span> <span class="nn">scipy</span>     <span class="c1"># for test
</span><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">from</span> <span class="nn">scipy</span> <span class="kn">import</span> <span class="n">ndimage</span>

<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">load_dataset</span><span class="p">():</span>
    <span class="k">with</span> <span class="n">h5py</span><span class="p">.</span><span class="n">File</span><span class="p">(</span><span class="s">'C:/Users\DNI_180902/Desktop/Data/DL-WK2/train_catvnoncat.h5'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">train_dataset</span><span class="p">:</span>
        <span class="n">train_set_x_orig</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">train_dataset</span><span class="p">[</span><span class="s">"train_set_x"</span><span class="p">][:])</span>
        <span class="n">train_set_y_orig</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">train_dataset</span><span class="p">[</span><span class="s">"train_set_y"</span><span class="p">][:])</span>

    <span class="k">with</span> <span class="n">h5py</span><span class="p">.</span><span class="n">File</span><span class="p">(</span><span class="s">'C:/Users\DNI_180902/Desktop/Data/DL-WK2/test_catvnoncat.h5'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="k">as</span> <span class="n">test_dataset</span><span class="p">:</span>
        <span class="n">test_set_x_orig</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">test_dataset</span><span class="p">[</span><span class="s">"test_set_x"</span><span class="p">][:])</span>
        <span class="n">test_set_y_orig</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">test_dataset</span><span class="p">[</span><span class="s">"test_set_y"</span><span class="p">][:])</span>
        <span class="n">classes</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">test_dataset</span><span class="p">[</span><span class="s">"list_classes"</span><span class="p">][:])</span>

    <span class="n">train_set_y_orig</span> <span class="o">=</span> <span class="n">train_set_y_orig</span><span class="p">.</span><span class="n">reshape</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="n">train_set_y_orig</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
    <span class="n">test_set_y_orig</span> <span class="o">=</span> <span class="n">test_set_y_orig</span><span class="p">.</span><span class="n">reshape</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="n">test_set_y_orig</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>

    <span class="k">return</span> <span class="n">train_set_x_orig</span><span class="p">,</span> <span class="n">train_set_y_orig</span><span class="p">,</span> <span class="n">test_set_x_orig</span><span class="p">,</span> <span class="n">test_set_y_orig</span><span class="p">,</span> <span class="n">classes</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train_set_x_orig</span><span class="p">,</span> <span class="n">train_set_y</span><span class="p">,</span> <span class="n">test_set_x_orig</span><span class="p">,</span> <span class="n">test_set_y</span><span class="p">,</span> <span class="n">classes</span> <span class="o">=</span> <span class="n">load_dataset</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"Training_Set_X : {0}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">train_set_x_orig</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Test_Set_X : {0}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">test_set_x_orig</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>

<span class="c1"># (num of examples, (Height, Width px size of image), channels(RGB - 3 channels))
# Training_Set : 209 examples of (64, 64, 3) 3-Dimensional image data
# Test_Set : 50 examples of (64, 64, 3) 3-Dimensional image data
</span></code></pre></div></div>

<p><img width="450" alt="image" src="https://user-images.githubusercontent.com/92680829/168480368-a0997047-c7d9-4a7b-b822-1cc395b0f2fd.png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"Training_Set_Y : {0}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">train_set_y</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Test_Set_Y : {0}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">test_set_y</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>

<span class="c1"># result : 1 (Cat) or 0 (Non-Cat)
# 209 training examples
# 50 test examples
</span></code></pre></div></div>
<p><img width="284" alt="image" src="https://user-images.githubusercontent.com/92680829/168480534-d9f67abf-d558-450f-a528-6f719a2fe405.png" /></p>

<p><br /></p>

<h3 id="reshape-x-dataset"><strong>Reshape X Dataset</strong></h3>
<ul>
  <li>209 training examples of 64x64x3 image (64x64x3, 209)</li>
  <li><img src="https://user-images.githubusercontent.com/92680829/161663284-2172ce3e-d8ab-4d58-bc68-dc9c747f4615.png" width="400" /></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train_set_x_flatten</span> <span class="o">=</span> <span class="n">train_set_x_orig</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">train_set_x_orig</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="n">T</span>
<span class="n">test_set_x_flatten</span> <span class="o">=</span> <span class="n">test_set_x_orig</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">test_set_x_orig</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="n">T</span>
<span class="k">print</span><span class="p">(</span><span class="n">train_set_x_flatten</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">test_set_x_flatten</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">train_set_x_flatten</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>    <span class="c1"># sample check
</span></code></pre></div></div>

<p><img width="291" alt="image" src="https://user-images.githubusercontent.com/92680829/168480573-c357c0fc-f52b-4636-9561-c28c1b854cf0.png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Normalization
# pixel range : 0~255 
# convert all the values of matrix ranging from 0 ~ 1
</span>
<span class="n">train_set_x_flatten</span> <span class="o">=</span>  <span class="n">train_set_x_flatten</span><span class="o">/</span><span class="mi">255</span>
<span class="n">test_set_x_flatten</span> <span class="o">=</span> <span class="n">test_set_x_flatten</span><span class="o">/</span><span class="mi">255</span>
<span class="k">print</span><span class="p">(</span><span class="n">train_set_x_flatten</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>
</code></pre></div></div>
<p><img width="489" alt="image" src="https://user-images.githubusercontent.com/92680829/168480588-30c3b2ff-7d9b-4c9e-ab94-8d1fd41fc962.png" /></p>

<p><br /></p>

<h2 id="building-learning-algorithm"><strong>Building Learning Algorithm</strong></h2>

<p><br /></p>

<h3 id="general-architecture-of-the-learning-algorithm"><strong>General Architecture of the learning algorithm</strong></h3>

<ul>
  <li>
    <p><img src="https://user-images.githubusercontent.com/92680829/168478884-06b82252-bb1d-461d-902a-5a0347ea725b.png" width="500" /></p>
  </li>
  <li>features : 12388 (64x6x3)</li>
  <li>activation function : logistic regression</li>
  <li>classifier : binary classifier (1 for cat, 0 for non-cat)</li>
  <li>
    <p>decision-threshold : 0.5</p>
  </li>
  <li>Mathematical expression of the algorithm:
    <ul>
      <li><img src="https://user-images.githubusercontent.com/92680829/161677221-7ea2d0b9-27e6-4e1b-80d0-4b855ad58119.png" width="400" /></li>
      <li>Cost is then computed by summing over all training examples:
        <ul>
          <li><img src="https://user-images.githubusercontent.com/92680829/161677367-291b20f4-179f-43b7-a087-8578059f5251.png" width="200" /></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>

<h3 id="steps"><strong>STEPS</strong></h3>
<ol>
  <li>Define Model Structure</li>
  <li>Initialize Parameters</li>
  <li>Repeat Below
    <ul>
      <li>Calculate current loss : Forward Propagation</li>
      <li>Caculate current gradient : Backward Propagation</li>
      <li>Update parameters by gradient descent</li>
    </ul>
  </li>
</ol>

<h3 id="helper-functions"><strong>Helper functions</strong></h3>

<h4 id="sigmoid-function">sigmoid function</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">sigmoid</span><span class="p">(</span><span class="n">z</span><span class="p">):</span>    
    <span class="k">return</span> <span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">z</span><span class="p">))</span>
</code></pre></div></div>

<h4 id="initialize-parameters">initialize parameters</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># dim : 64x64x3
</span>
<span class="k">def</span> <span class="nf">init_params</span><span class="p">(</span><span class="n">dim</span><span class="p">):</span>     
    <span class="n">w</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">dim</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
    <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span>
    
    <span class="k">assert</span><span class="p">(</span><span class="n">w</span><span class="p">.</span><span class="n">shape</span> <span class="o">==</span> <span class="p">(</span><span class="n">dim</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
    <span class="k">assert</span><span class="p">(</span><span class="nb">isinstance</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="nb">float</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="nb">int</span><span class="p">))</span>
    
    <span class="k">return</span> <span class="n">w</span><span class="p">,</span> <span class="n">b</span>
</code></pre></div></div>

<h4 id="forward--backward-propagation">Forward &amp; Backward Propagation</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">propagate</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">):</span>
    <span class="s">"""
    Implement the cost function and its gradient for the propagation explained above
    
    Arguments:
    w -- weights, a numpy array of size (num_px * num_px * 3, 1)
    b -- bias, a scalar
    X -- data of size (num_px * num_px * 3, m)
    Y -- true "label" vector (0 non-cat, 1 cat) of size (1, m)
    
    Return:
    cost -- negative log-likelihood cost for logistic regression
    dw -- gradient of the loss with respect to w, thus same shape as w
    db -- gradient of the loss with respect to b, thus same shape as b

    """</span>
    
    <span class="n">m</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

    <span class="c1"># forward
</span>    <span class="n">A</span> <span class="o">=</span> <span class="n">sigmoid</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">w</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">X</span><span class="p">)</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span> 
    <span class="n">cost</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="n">m</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">Y</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">A</span><span class="p">))</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">((</span><span class="mi">1</span> <span class="o">-</span> <span class="n">Y</span><span class="p">)</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">A</span><span class="p">)))</span>
    
    <span class="c1"># backward
</span>    <span class="n">dw</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">m</span><span class="p">)</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="p">(</span><span class="n">A</span> <span class="o">-</span> <span class="n">Y</span><span class="p">).</span><span class="n">T</span><span class="p">)</span>
    <span class="n">db</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">m</span><span class="p">)</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">A</span> <span class="o">-</span> <span class="n">Y</span><span class="p">)</span>
    
    <span class="k">assert</span><span class="p">(</span><span class="n">dw</span><span class="p">.</span><span class="n">shape</span> <span class="o">==</span> <span class="n">w</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
    <span class="k">assert</span><span class="p">(</span><span class="n">db</span><span class="p">.</span><span class="n">dtype</span> <span class="o">==</span> <span class="nb">float</span><span class="p">)</span>
    <span class="n">cost</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">squeeze</span><span class="p">(</span><span class="n">cost</span><span class="p">)</span>
    
    <span class="n">grads</span> <span class="o">=</span> <span class="p">{</span><span class="s">"dw"</span> <span class="p">:</span> <span class="n">dw</span><span class="p">,</span>
            <span class="s">"db"</span> <span class="p">:</span> <span class="n">db</span><span class="p">}</span>
    
    <span class="k">return</span> <span class="n">grads</span><span class="p">,</span> <span class="n">cost</span>
</code></pre></div></div>

<h4 id="optimization">Optimization</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Finding w that can minimizes Cost by Gradient Descent
</span>
<span class="k">def</span> <span class="nf">optimize</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">num_iter</span><span class="p">,</span> <span class="n">lr</span><span class="p">,</span> <span class="n">print_cost</span> <span class="o">=</span> <span class="bp">False</span><span class="p">):</span>
    <span class="s">"""
    This function optimizes w and b by running a gradient descent algorithm
    
    Arguments:
    w, b, X, Y ~ same as above
    num_iter -- number of iterations of iteration loop
    lr -- regularization factor
    print_cost -- True to print the loss every 100 steps
    
    Returns:
    params -- dictionary containing the weights w and bias b
    grads -- dictionary containing the gradients of the weights and bias with respect to the cost function
    costs -- list of all the costs computed during the optimization, this will be used to plot the learning curve.
    """</span>
    
    <span class="n">costs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">cost</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="s">'inf'</span><span class="p">)</span>
    <span class="n">nan_cnt</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_iter</span><span class="p">):</span>
        <span class="n">print_cost</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="n">grads</span><span class="p">,</span> <span class="n">cost_new</span> <span class="o">=</span> <span class="n">propagate</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">)</span>
        <span class="n">dw</span> <span class="o">=</span> <span class="n">grads</span><span class="p">[</span><span class="s">"dw"</span><span class="p">]</span>
        <span class="n">db</span> <span class="o">=</span> <span class="n">grads</span><span class="p">[</span><span class="s">"db"</span><span class="p">]</span>
        <span class="n">w</span> <span class="o">-=</span> <span class="n">lr</span><span class="o">*</span><span class="n">dw</span>
        <span class="n">b</span> <span class="o">-=</span> <span class="n">lr</span><span class="o">*</span><span class="n">db</span>
        
        <span class="k">if</span> <span class="ow">not</span> <span class="n">np</span><span class="p">.</span><span class="n">isnan</span><span class="p">(</span><span class="n">cost_new</span><span class="p">)</span> <span class="ow">and</span> <span class="n">cost_new</span> <span class="o">&lt;</span> <span class="n">cost</span><span class="p">:</span>
            <span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">best_w</span> <span class="o">=</span> <span class="n">w</span>
            <span class="n">best_b</span> <span class="o">=</span> <span class="n">b</span>
            <span class="n">cost</span> <span class="o">=</span> <span class="n">cost_new</span>
            <span class="n">best_iter</span> <span class="o">=</span> <span class="n">k</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">flag</span> <span class="o">+=</span> <span class="mi">1</span>
        
        <span class="k">if</span> <span class="n">k</span><span class="o">%</span><span class="mi">100</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">print_cost</span> <span class="o">=</span> <span class="bp">True</span>
        
        <span class="k">if</span> <span class="n">print_cost</span><span class="p">:</span>
            <span class="n">costs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">cost_new</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Cost After {0}th iterations : {1}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">cost_new</span><span class="p">))</span>
    
        <span class="k">if</span> <span class="n">flag</span> <span class="o">&gt;=</span> <span class="mi">2000</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">best_iter</span><span class="p">,</span> <span class="n">cost</span><span class="p">,</span> <span class="n">costs</span><span class="p">,</span> <span class="n">best_w</span><span class="p">,</span> <span class="n">best_b</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>

    <span class="k">return</span> <span class="p">(</span><span class="n">best_iter</span><span class="p">,</span> <span class="n">cost</span><span class="p">,</span> <span class="n">costs</span><span class="p">,</span> <span class="n">best_w</span><span class="p">,</span> <span class="n">best_b</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>

</code></pre></div></div>

<h4 id="predict-cat1-or-non-cat1">predict cat(1) or Non-Cat(1)</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="n">best_w</span><span class="p">,</span> <span class="n">best_b</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
    <span class="s">'''
    Predict whether the label is 0 or 1 using optimized lr parameters (w, b)

    Returns:
    Y_prediction - a numpy array (vector) containing all predictions (0/1) for the examples in X
    '''</span>
    
    <span class="n">A</span> <span class="o">=</span> <span class="n">sigmoid</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">dot</span><span class="p">(</span><span class="n">best_w</span><span class="p">.</span><span class="n">T</span><span class="p">,</span> <span class="n">X</span><span class="p">)</span> <span class="o">+</span> <span class="n">best_b</span><span class="p">)</span>
    <span class="n">m</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">pred</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="n">m</span><span class="p">))</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mf">0.5</span><span class="p">:</span>
            <span class="n">pred</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">pred</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
            
    <span class="k">assert</span><span class="p">(</span><span class="n">pred</span><span class="p">.</span><span class="n">shape</span><span class="o">==</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">m</span><span class="p">))</span>
    
    <span class="k">return</span> <span class="n">pred</span>
</code></pre></div></div>

<h4 id="merge-all-functions-into-final-model">Merge all functions into Final Model</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">model</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> <span class="n">Y_test</span><span class="p">,</span> <span class="n">num_iter</span> <span class="o">=</span> <span class="mi">2000</span><span class="p">,</span> <span class="n">lr</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">print_cost</span> <span class="o">=</span> <span class="bp">False</span><span class="p">):</span>
    <span class="s">"""
    Builds the logistic regression model by calling the function you've implemented previously
    
    Arguments:
    X_train -- training set represented by a numpy array of shape (64*64*3, m_train)
    Y_train -- training labels represented by a numpy array (vector) of shape (1, m_train)
    X_test -- test set represented by a numpy array of shape (64*64*3, m_test)
    Y_test -- test labels represented by a numpy array (vector) of shape (1, m_test)
    
    Returns:
    d -- dictionary containing information about the model.
    """</span>
    
    <span class="n">n_px</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">w</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">init_params</span><span class="p">(</span><span class="n">n_px</span><span class="p">)</span>
    
    <span class="k">print</span><span class="p">(</span><span class="s">"&lt; Train Dataset &gt;"</span><span class="p">)</span>
    <span class="n">best_iter</span><span class="p">,</span> <span class="n">cost</span><span class="p">,</span> <span class="n">costs</span><span class="p">,</span> <span class="n">best_w</span><span class="p">,</span> <span class="n">best_b</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">optimize</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> <span class="n">num_iter</span><span class="p">,</span> <span class="n">lr</span><span class="p">,</span> <span class="n">print_cost</span><span class="p">)</span>
    
    <span class="n">w_test</span><span class="p">,</span> <span class="n">b_test</span> <span class="o">=</span> <span class="n">init_params</span><span class="p">(</span><span class="n">n_px</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"&lt; Test Dataset &gt;"</span><span class="p">)</span>
    <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">costs_test</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">optimize</span><span class="p">(</span><span class="n">w_test</span><span class="p">,</span> <span class="n">b_test</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">Y_test</span><span class="p">,</span> <span class="n">num_iter</span><span class="p">,</span> <span class="n">lr</span><span class="p">,</span> <span class="n">print_cost</span><span class="p">)</span>
    
    <span class="n">pred_train</span> <span class="o">=</span> <span class="n">predict</span><span class="p">(</span><span class="n">best_w</span><span class="p">,</span> <span class="n">best_b</span><span class="p">,</span> <span class="n">X_train</span><span class="p">)</span>
    <span class="n">pred_test</span> <span class="o">=</span> <span class="n">predict</span><span class="p">(</span><span class="n">best_w</span><span class="p">,</span> <span class="n">best_b</span><span class="p">,</span> <span class="n">X_test</span><span class="p">)</span>
    
    <span class="k">print</span><span class="p">(</span><span class="s">"Train Accuracy : {0}"</span><span class="p">.</span><span class="nb">format</span><span class="p">((</span><span class="mi">1</span><span class="o">-</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">Y_train</span> <span class="o">-</span> <span class="n">pred_train</span><span class="p">)))</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Test Accuracy : {0}"</span><span class="p">.</span><span class="nb">format</span><span class="p">((</span><span class="mi">1</span><span class="o">-</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">Y_test</span> <span class="o">-</span> <span class="n">pred_test</span><span class="p">)))</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
    
    <span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s">"cost"</span> <span class="p">:</span> <span class="n">cost</span><span class="p">,</span>
         <span class="s">"costs_test"</span> <span class="p">:</span> <span class="n">costs_test</span><span class="p">,</span>
        <span class="s">"costs"</span> <span class="p">:</span> <span class="n">costs</span><span class="p">,</span>
         <span class="s">"w"</span> <span class="p">:</span> <span class="n">w</span><span class="p">,</span>
         <span class="s">"b"</span> <span class="p">:</span> <span class="n">b</span><span class="p">,</span>
        <span class="s">"best_w"</span> <span class="p">:</span> <span class="n">best_w</span><span class="p">,</span>
        <span class="s">"best_b"</span> <span class="p">:</span> <span class="n">best_b</span><span class="p">,</span>
        <span class="s">"learning_rate"</span> <span class="p">:</span> <span class="n">lr</span><span class="p">,</span>
        <span class="s">"num_iter"</span><span class="p">:</span> <span class="n">num_iter</span><span class="p">,</span>
        <span class="s">"best_iter"</span> <span class="p">:</span> <span class="n">best_iter</span><span class="p">}</span>
    
    <span class="k">return</span> <span class="n">d</span>
</code></pre></div></div>

<h2 id="check-model-performace"><strong>Check Model Performace</strong></h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">train_set_x_flatten</span><span class="p">,</span> <span class="n">test_set_x_flatten</span><span class="p">,</span> <span class="n">train_set_y</span><span class="p">,</span> <span class="n">test_set_y</span><span class="p">,</span> <span class="mi">2000</span><span class="p">,</span> <span class="mf">0.005</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>

<span class="c1"># make sure that you set the appropriate learning rate
</span></code></pre></div></div>

<p><img width="464" alt="image" src="https://user-images.githubusercontent.com/92680829/168480617-cfb5bf87-3ab9-4ca9-8f9b-d5ea3e5ef579.png" />
<img width="457" alt="image" src="https://user-images.githubusercontent.com/92680829/168480667-d1da9b05-3671-4843-8d31-7df5120919ba.png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="s">'costs_test'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="s">'b'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">"Test"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">d</span><span class="p">[</span><span class="s">'costs'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="s">'g'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">"Train"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"Iterations (per 100)"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">"Cost"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"Learning Rate : 0.005"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/92680829/168479802-dc0bc9fb-3a21-454d-841e-139b1e03def5.png" width="450" /></p>

<p><br /></p>

<h3 id="how-learning-curve-differs-by-learning-rate"><strong>How Learning Curve Differs by Learning Rate</strong></h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="n">lrs</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.005</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">,</span> <span class="mf">0.0005</span><span class="p">]</span>
<span class="n">res_by_lr</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="k">for</span> <span class="n">lr</span> <span class="ow">in</span> <span class="n">lrs</span><span class="p">:</span>
    <span class="n">d</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">train_set_x_flatten</span><span class="p">,</span> <span class="n">test_set_x_flatten</span><span class="p">,</span> <span class="n">train_set_y</span><span class="p">,</span> <span class="n">test_set_y</span><span class="p">,</span> <span class="mi">2000</span><span class="p">,</span> <span class="n">lr</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
    <span class="n">res_by_lr</span><span class="p">[</span><span class="s">"{0}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">lr</span><span class="p">)]</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="s">"costs"</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s">'r'</span><span class="p">,</span> <span class="s">'g'</span><span class="p">,</span> <span class="s">'b'</span><span class="p">,</span> <span class="s">'violet'</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">lr</span><span class="p">,</span> <span class="n">costs</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">res_by_lr</span><span class="p">.</span><span class="n">items</span><span class="p">()):</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">costs</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="n">lr</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"Iterations (per 100)"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">"Cost"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"Leaning Curves by Different Learning Rate"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_facecolor</span><span class="p">(</span><span class="s">'w'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>

<span class="c1"># turns out 0.01 is the best learning rate 
</span></code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/92680829/168479858-05752ae9-e075-4956-ba9e-5333c0dc4671.png" width="500" /></p>

<p><br /></p>

<h3 id="test-with-your-own-image--cat-or-not-cat"><strong>Test With Your Own Image : Cat or Not Cat?</strong></h3>
<p><img src="https://user-images.githubusercontent.com/92680829/161874013-9c9c3aeb-594a-46fb-b539-66e8458bcb34.png" width="350" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="nn">matplotlib.image</span> <span class="k">as</span> <span class="n">img</span>
<span class="kn">from</span> <span class="nn">urllib.request</span> <span class="kn">import</span> <span class="n">urlopen</span>

<span class="k">def</span> <span class="nf">get_cat_img</span><span class="p">(</span><span class="n">url</span><span class="p">):</span>
    <span class="n">my_cat</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="n">urlopen</span><span class="p">(</span><span class="n">url</span><span class="p">))</span>

    <span class="n">n_px</span> <span class="o">=</span> <span class="n">train_set_x_orig</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">catarray</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">asarray</span><span class="p">(</span><span class="n">my_cat</span><span class="p">)</span>
    <span class="n">cat</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">Image</span><span class="p">.</span><span class="n">fromarray</span><span class="p">(</span><span class="n">catarray</span><span class="p">).</span><span class="n">resize</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="n">n_px</span><span class="p">,</span> <span class="n">n_px</span><span class="p">))).</span><span class="n">reshape</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)).</span><span class="n">T</span>
    
    <span class="k">return</span> <span class="n">cat</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># used model : lr - 0.01 
</span>
<span class="n">d</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">train_set_x_flatten</span><span class="p">,</span> <span class="n">test_set_x_flatten</span><span class="p">,</span> <span class="n">train_set_y</span><span class="p">,</span> <span class="n">test_set_y</span><span class="p">,</span> <span class="mi">2000</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
<span class="n">best_w</span><span class="p">,</span> <span class="n">best_b</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="s">"best_w"</span><span class="p">],</span> <span class="n">d</span><span class="p">[</span><span class="s">"best_b"</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cats</span> <span class="o">=</span> <span class="p">[</span><span class="s">"https://user-images.githubusercontent.com/92680829/161882766-dfe0cd10-0ed3-4b87-9659-20c81c61b8b5.png"</span><span class="p">,</span>
       <span class="s">"https://user-images.githubusercontent.com/92680829/161882868-1753eeba-42fc-479c-94ab-f9c3d87529e7.png"</span><span class="p">,</span>
       <span class="s">"https://user-images.githubusercontent.com/92680829/161882894-904d0a81-1518-4b7b-82af-5329584b618b.png"</span><span class="p">,</span>
       <span class="s">"https://user-images.githubusercontent.com/92680829/161882954-f852ced5-5596-4286-bc23-df45797a4142.png"</span><span class="p">,</span>
       <span class="s">"https://user-images.githubusercontent.com/92680829/161883046-ab99cec6-2ce3-4d47-8e36-76085d929924.png"</span><span class="p">,</span>
       <span class="s">"https://user-images.githubusercontent.com/92680829/161892955-84c22938-2008-43f6-8f8f-8930508ec0ec.png"</span><span class="p">,</span>
       <span class="s">"https://user-images.githubusercontent.com/92680829/161892992-a5dca781-cfc0-48c3-89b6-2c5e90d322ef.png"</span><span class="p">,</span>
       <span class="s">"https://user-images.githubusercontent.com/92680829/161893118-f505be6f-6dee-43a2-8fae-743195d4e2b5.png"</span><span class="p">,</span>
       <span class="s">"https://user-images.githubusercontent.com/92680829/161893303-90588cc4-2e54-47e6-80ed-ed7360c4ec5f.png"</span><span class="p">,</span>
       <span class="s">"https://user-images.githubusercontent.com/92680829/161893353-6ec427d8-8789-46c0-b9ac-3627aafc95ab.png"</span><span class="p">,</span>
       <span class="s">"https://user-images.githubusercontent.com/92680829/161893642-c49cc4ee-7eb0-4321-8e93-2e7a253a9fca.png"</span><span class="p">,</span>
       <span class="s">"https://user-images.githubusercontent.com/92680829/161893546-f969f22a-1003-495e-a0d3-30bbb9023ebd.png"</span><span class="p">]</span>

<span class="n">Y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]).</span><span class="n">reshape</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">Y</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">pred</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">m</span><span class="p">,</span> <span class="mi">1</span><span class="p">)).</span><span class="n">T</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
    <span class="n">cat</span> <span class="o">=</span> <span class="n">get_cat_img</span><span class="p">(</span><span class="n">cats</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="n">pred</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">predict</span><span class="p">(</span><span class="n">best_w</span><span class="p">,</span> <span class="n">best_b</span><span class="p">,</span> <span class="n">cat</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">accuracy</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">Y</span><span class="o">-</span><span class="n">pred</span><span class="p">)))</span><span class="o">*</span><span class="mi">100</span>
<span class="n">accuracy</span>

<span class="k">print</span><span class="p">(</span><span class="s">"ì ëµ : {0} / ìì¸¡ê° : {1}</span><span class="se">\n</span><span class="s">ì íë : {2}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">Y</span><span class="p">,</span> <span class="n">pred</span><span class="p">,</span> <span class="n">accuracy</span><span class="p">))</span>
</code></pre></div></div>
<p><img width="580" alt="image" src="https://user-images.githubusercontent.com/92680829/168480746-0d3f8cb6-4637-476f-b3fb-e5cc31c064b5.png" /></p>

<ul>
  <li>As logistic regression is not the best algorithm as an image classifier,</li>
  <li>the performance of model is not that great</li>
  <li>Later on, other algorithms with better formance on distinguishing images will be covered.</li>
</ul>
:ET